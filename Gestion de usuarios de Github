🧾 Repositorio sugerido:
web-arquitectura-spa-ssr-webcomponents

🗂️ Labels sugeridos
- feature: Nueva funcionalidad
- enhancement: Mejora de una funcionalidad
- bug: Error
- documentation: Documentación
- refactor: Reestructuración de código
- help wanted: Se necesita ayuda
- good first issue: Tarea inicial amigable
- high priority: Prioridad alta

✅ Issues principales
🔹 Issue #1 - Configurar estructura inicial del repositorio
Tipo: feature, good first issue
Descripción:
Configurar el proyecto con la estructura base (carpetas: /views, /components, /public, server.js, etc.) para soportar SSR, SPA y componentes.
Checklist:
- Crear carpetas necesarias
- Agregar .gitignore
- Crear archivo README.md con resumen del proyecto

🔹 Issue #2 - Implementar SPA básica con ruteo por hash
Tipo: feature
Descripción:
Crear una SPA con ruteo del lado del cliente usando hash y mostrar diferentes vistas (#home, #acerca, #contacto) sin recargar la página.
Checklist:
- Sistema de ruteo en app.js
- Vistas dinámicas conectadas
- Vista por defecto y 404

🔹 Issue #3 - Desarrollar Web Components nativos
Tipo: feature
Descripción:
Crear Web Components reutilizables como app-header, app-footer, vista-home, etc., usando Shadow DOM y plantillas HTML.
Checklist:
- Header y Footer
- Componente para vista principal
- Encapsulamiento de estilos

🔹 Issue #4 - Agregar estilos globales y responsivos
Tipo: enhancement
Descripción:
Incorporar CSS modular o global para darle diseño y responsividad a la SPA.
Checklist:
- Estilos para nav, body, main
- Responsive para móviles
- Uso de variables CSS si aplica

🔹 Issue #5 - Implementar SSR con Node.js y Express
Tipo: feature, high priority
Descripción:
Configurar renderizado del lado del servidor para servir archivos HTML desde Express según ruta /, /acerca, /contacto.
Checklist:
- Crear server.js
- Rutas con res.sendFile
- Manejo de 404
- Servir archivos estáticos

🔹 Issue #6 - Agregar motor de plantillas (opcional)
- Tipo: enhancement
- Descripción:

Agregar motor de plantillas como EJS para reutilizar partes del HTML (layout base, header, footer) entre las vistas SSR.
Checklist:
- Instalar EJS
- Configurar view engine
- Usar includes para layout

🔹 Issue #7 - Documentar arquitecturas web en el README
Tipo: documentation
Descripción:
Agregar al README una sección teórica explicando SSR, SPA y PWA con ventajas y desventajas.
Checklist:
- Definir SSR
- Definir SPA
- Definir PWA

Cuadro comparativo
🔹 Issue #8 - Crear flujo de trabajo de despliegue
Tipo: enhancement
Descripción:
Configurar GitHub Actions o instrucciones para deploy manual (Vercel, Render, Railway o VPS).
Checklist:
- Despliegue SSR
- Despliegue SPA

Agregar instrucciones en README
🔹 Issue #9 - Testing básico (HTML + JS)
Tipo: enhancement
Descripción:
Probar funcionalidades básicas: navegación, carga de componentes, estilos.
Checklist:
- SPA funciona sin errores
- SSR sirve correctamente
- Componentes cargan en las vistas

🔹 Issue #10 - Planificación: hoja de ruta (Roadmap)
Tipo: documentation, high priority
Descripción:
Agregar a Projects una hoja de ruta que agrupe todos los issues por fase: planificación, desarrollo, refactor, despliegue.
Checklist:
- Crear proyecto Kanban en GitHub
- Organizar por tareas
- Vincular Issues a milestones

🔄 Relaciones y dependencias sugeridas son: 
- El Issue #1 debe completarse antes de todos los demás.
- El #2 y #3 son independientes, pero ambos deben estar listos antes de #9.
- El #5 puede desarrollarse en paralelo, pero se debe completar antes de #8 (deploy).
- El #6 es opcional, pero complementa el #5 (SSR).
- El #10 debe hacerse al inicio y actualizarse a medida que avanza el proyecto.

