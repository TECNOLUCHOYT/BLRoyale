ðŸ“˜ DESCRIPCIÃ“N COMPLETA DEL DIAGRAMA DE CLASES â€“ BL ROYALE
ðŸ”· 1. Clase: Usuario

DescripciÃ³n: Representa a cualquier persona registrada en el sistema, incluyendo jugadores y administradores.
Atributos:
- idUsuario: int
- nombreUsuario: string
- email: string
- contraseÃ±a: string
- fechaRegistro: datetime
- esAdmin: bool

MÃ©todos:
- iniciarSesion(): bool
- cerrarSesion(): void
- registrarse(): Usuario
- actualizarPerfil(): void

Relaciones:
- Hereda a Jugador
- Tiene una asociaciÃ³n con Sesion
- Si esAdmin es true, se comporta como Administrador

Casos de uso relacionados:
- Registrarse/Iniciar sesiÃ³n
- Acceder como administrador

ðŸ”· 2. Clase: Jugador (hereda de Usuario)
DescripciÃ³n: Es el tipo de usuario que participa en partidas y usa todas las funcionalidades del juego.

Atributos:

- nivel: int
- experiencia: int
- monedasBLC: int (moneda virtual)
- monedasBLP: int (moneda premium)
- listaAmigos: List<Jugador>

MÃ©todos:

- jugarPartida(): void
- ganarExperiencia(puntos: int): void
- obtenerRecompensa(): void
- comprarObjeto(obj: Objeto): bool
- agregarAmigo(jugador: Jugador): void

Relaciones:

- Participa en muchas Partida
- Tiene una colecciÃ³n de Logro, Recompensa, Objeto, Estadistica
- Puede enviar mensajes a travÃ©s de Chat

Casos de uso relacionados:

- Unirse a partida
- Ganar experiencia
- Comprar en la tienda
- Reclamar recompensas
- Interactuar con amigos

ðŸ”· 3. Clase: Administrador (hereda de Usuario)
DescripciÃ³n: Tiene privilegios para gestionar jugadores, moderar contenido y monitorear el sistema.

Atributos:
- privilegios: List<string>

MÃ©todos:

banearJugador(jugador: Jugador): void

verEstadisticasGlobales(): void

moderarChat(): void

gestionarTienda(): void

Casos de uso relacionados:

Moderar jugadores

Revisar estadÃ­sticas

Gestionar tienda y recompensas

ðŸ”· 4. Clase: Partida
DescripciÃ³n: Representa una sesiÃ³n de juego en la que participan varios jugadores.

Atributos:

- idPartida: int
- fechaInicio: datetime
- fechaFin: datetime
- jugadores: List<Jugador>
- estado: string (En curso, Finalizada)

MÃ©todos:

- iniciarPartida(): void
- finalizarPartida(): void
- determinarGanador(): Jugador

Relaciones:

- Muchos Jugador participan
- Genera Estadistica al finalizar

Casos de uso relacionados:

- Jugar partida
- Obtener recompensas
- Calcular resultados

ðŸ”· 5. Clase: Objeto
DescripciÃ³n: Representa elementos cosmÃ©ticos o de personalizaciÃ³n disponibles en la tienda.

Atributos:
- idObjeto: int
- nombre: string
- tipo: string (skin, baile, traje, etc.)
- precioBLC: int
- precioBLP: int
- disponibilidad: bool

MÃ©todos:

- desbloquear(): void

Relaciones:

- Pertenecen a muchos Jugador
- Se venden en Tienda

Casos de uso relacionados:

-Comprar en tienda
- Personalizar personaje

ðŸ”· 6. Clase: Tienda
DescripciÃ³n: Sistema que permite la compra de objetos usando monedas.

Atributos:

- objetosDisponibles: List<Objeto>

MÃ©todos:

- mostrarObjetos(): List<Objeto>
- venderObjeto(jugador: Jugador, obj: Objeto): bool

Relaciones:

- RelaciÃ³n con Objeto
- Usada por Jugador

Casos de uso relacionados:

- Comprar en tienda
- Visualizar objetos

ðŸ”· 7. Clase: Recompensa
DescripciÃ³n: Premios que el jugador obtiene por su progreso o por logros.

Atributos:
- idRecompensa: int
- descripcion: string
- tipo: string (Diaria, Logro, Evento)
- valorMoneda: int

MÃ©todos:

- reclamar(): void

Relaciones:

- Asociada a Jugador
- Casos de uso relacionados:
- Reclamar recompensas diarias
- Obtener recompensas por logros

ðŸ”· 8. Clase: Logro
DescripciÃ³n: Marca metas alcanzadas por el jugador.

Atributos:

- idLogro: int
- descripcion: string
- progreso: int
- meta: int
- completado: bool

MÃ©todos:

- actualizarProgreso(): void
- verificarCompletado(): bool

Relaciones:

- Asociado a Jugador

Casos de uso relacionados:

- Logros desbloqueados
- Seguimiento de metas

ðŸ”· 9. Clase: Estadistica
DescripciÃ³n: InformaciÃ³n sobre el rendimiento del jugador en partidas.

Atributos:

- idEstadistica: int
- partidasJugadas: int
- victorias: int
- killsTotales: int
- promedioSobrevivencia: float

Relaciones:

- Vinculada a Jugador

Casos de uso relacionados:

- Ver estadÃ­sticas

ðŸ”· 10. Clase: Chat
DescripciÃ³n: Mecanismo de comunicaciÃ³n entre jugadores.

Atributos:

- idChat: int
- participantes: List<Jugador>
- mensajes: List<string>

MÃ©todos:

- enviarMensaje(texto: string): void
- recibirMensaje(): string

Relaciones:

- Usado por Jugador

Casos de uso relacionados:

- Interactuar con amigos
- ComunicaciÃ³n en partidas

ðŸ”„ Relaciones Generales (Resumen UML)

Herencia:
  - Usuario â†’ Jugador
  - Usuario â†’ Administrador

Asociaciones:
  - Jugador participa en Partida
  - Jugador tiene Objeto, Logro, Recompensa, Estadistica
  - Tienda contiene Objeto
  - Jugador interactÃºa mediante Chat

ðŸ“Œ ConexiÃ³n con Casos de Uso.

| Caso de Uso	Clases    | Principales Involucradas       |
|-----------------------|--------------------------------|
| Registro / Login      |	Usuario, Sesion                |
| Jugar partida	        | Jugador, Partida, Estadistica  |
| Ganar experiencia	    | Jugador, Partida               |
| Comprar en la tienda  | Tienda, Objeto, Jugador        |
| Obtener recompensas 	| Recompensa, Jugador, Logro     |
| Ver estadÃ­sticas	    | Estadistica, Jugador           |
| Agregar               | amigos / Chat	Jugador, Chat    |
|ModeraciÃ³n del sistema |	Administrador, Jugador, Chat   |

